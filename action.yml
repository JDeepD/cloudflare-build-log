name: 'Cloudflare Build Log'
description: 'Get your Cloudflare Build Logs in your Repository Pull Requests'
author: Jaydeep Das
branding:
  icon: 'paperclip'
  color: 'white'

inputs:
  CLOUDFLARE_API_TOKEN:
    description: 'Cloudflare API Token for authentication'
    required: true
  ACCOUNT_ID:
    description: 'Cloudflare Account ID'
    required: true
  PROJECT_NAME:
    description: 'Cloudflare Pages project name'
    required: true
  GITHUB_TOKEN:
    description: 'GitHub token for creating/updating comments'
    required: true
  COMMIT_SHA:
    description: 'The SHA of the commit that triggered the workflow'
    required: true

runs:
  using: "composite"
  steps:
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: <!-- CLOUDFLARE_PAGES_BUILD_LOGS -->

    - name: Update comment with "Updating" status
      uses: peter-evans/create-or-update-comment@v3
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        comment-id: ${{ steps.fc.outputs.comment-id }}
        body: |
          <!-- CLOUDFLARE_PAGES_BUILD_LOGS -->
          ## Cloudflare Pages Build Status
          
          | Key | Value |
          | --- | ----- |
          | Branch | ${{ github.head_ref }} |
          | Commit | ${{ github.sha }} |
          | Status | Updating... |
          
          Build in progress. This comment will be updated once the build is complete.
        edit-mode: replace

    - name: Poll Cloudflare and Fetch logs
      shell: bash
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        ACCOUNT_ID: ${{ inputs.ACCOUNT_ID }}
        PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
        PR_BRANCH: ${{ github.head_ref }}
        COMMIT_SHA: ${{ inputs.COMMIT_SHA }}
      run: |
        fetch_latest_deployment() {
            RESPONSE=$(curl -s -X GET \
                "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json")
            
            if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
                LATEST_DEPLOYMENT=$(echo "$RESPONSE" | jq -c --arg branch "$PR_BRANCH" '.result | map(select(.deployment_trigger.metadata.branch == $branch)) | max_by(.created_on)')
                echo "$LATEST_DEPLOYMENT"
            else
                echo "Cloudflare API request failed. Response:"
                echo "$RESPONSE" | jq '.'
                exit 1
            fi
        }

        wait_for_build_completion() {
            MAX_ATTEMPTS=30
            ATTEMPT=0
            SLEEP_TIME=20

            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
                DEPLOYMENT=$(fetch_latest_deployment)
                STATUS=$(echo "$DEPLOYMENT" | jq -r '.latest_stage.status')

                if [ "$STATUS" = "success" ] || [ "$STATUS" = "failure" ]; then
                    echo "Build completed with status: $STATUS"
                    echo "BUILD_STATUS=$STATUS" >> $GITHUB_ENV
                    return 0
                elif [ "$STATUS" = "canceled" ]; then
                    echo "Build was canceled"
                    echo "BUILD_STATUS=canceled" >> $GITHUB_ENV
                    return 1
                fi

                echo "Build still in progress. Waiting..."
                sleep $SLEEP_TIME
                ATTEMPT=$((ATTEMPT + 1))
            done

            echo "Timeout waiting for build to complete"
            echo "BUILD_STATUS=timeout" >> $GITHUB_ENV
            return 1
        }

        fetchlogs() {
          DEPLOYMENT=$1
          if [ -z "$DEPLOYMENT" ]; then
              echo "No deployments found for branch: $PR_BRANCH."
              exit 0
          fi
          DEPLOYMENT_ID=$(echo "$DEPLOYMENT" | jq -r '.id')
          echo "\`\`\`"

          echo "Fetching deployment logs for deployment: $DEPLOYMENT_ID"

          LOGS_RESPONSE=$(curl -s -X GET \
              "https://api.cloudflare.com/client/v4/accounts/$ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments/$DEPLOYMENT_ID/history/logs" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json")

          if echo "$LOGS_RESPONSE" | jq -e '.success == true' > /dev/null; then
              echo "Deployment Log Summary:"
              echo "========================"

              TOTAL_LOGS=$(echo "$LOGS_RESPONSE" | jq -r '.result.total')
              echo "Total log entries: $TOTAL_LOGS"
              echo ""

              echo "$LOGS_RESPONSE" | jq -r '.result.data[] | .line' | while read -r message; do
                  case "$message" in
                      "Cloning repository..."*)
                          echo -e "\n[STEP] $message"
                          ;;
                      "Success: Finished cloning repository files")
                          echo -e "[SUCCESS] $message\n"
                          ;;
                      "Installing project dependencies:"*)
                          echo -e "\n[STEP] $message"
                          ;;
                      "Error:"*|"Failed:"*)
                          echo -e "\n[ERROR] $message"
                          ;;
                      *"ERR_PNPM"*)
                          echo -e "[ERROR] $message$"
                          ;;
                      "Detected the following tools"*)
                          echo -e "\n[INFO] $message"
                          ;;
                      *)
                          echo "$message"
                          ;;
                  esac
              done
          else
              echo "Failed to fetch deployment logs. API Response:"
              echo "$LOGS_RESPONSE" | jq '.'
          fi
          echo "\`\`\`"
        }

        if wait_for_build_completion; then
            latest_deployment=$(fetch_latest_deployment)
            BUILD_LOGS=$(fetchlogs "$latest_deployment")
            echo "logs<<EOF" >> $GITHUB_ENV
            echo "$BUILD_LOGS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
        else
            echo "Failed to fetch logs: Build did not complete successfully"
            echo "logs=Failed to fetch logs: Build did not complete successfully" >> $GITHUB_ENV
        fi
        
        echo "BUILD_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

    - name: Update comment with build results
      uses: peter-evans/create-or-update-comment@v3
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        comment-id: ${{ steps.fc.outputs.comment-id }}
        body: |
          <!-- CLOUDFLARE_PAGES_BUILD_LOGS -->
          ## Cloudflare Pages Build Logs
          
          | Key | Value |
          | --- | ----- |
          | Branch | ${{ github.head_ref }} |
          | Commit | ${{ inputs.COMMIT_SHA }} |
          | Build Time | ${{ env.BUILD_TIME }} |
          | Status | ${{ env.BUILD_STATUS }} |
          
          <details>
          <summary>Click to expand build logs</summary>
          
          ${{ env.logs }}
          
          </details>
        edit-mode: replace
